class Solution {
    public ListNode reverse(ListNode head){
        if(head==null){
            return head;
        }
        ListNode prev=null;
        ListNode cur=head;
        while(cur!=null){
            ListNode next=cur.next;
            cur.next=prev;
            prev=cur;
            cur=next;
        }
        return prev;
    }
    public int[] nextLargerNodes(ListNode head) {
        ListNode rev=reverse(head);
        Stack<Integer>s1=new Stack();
        Stack<Integer>s2=new Stack();
        ArrayList<Integer>list=new ArrayList();
        while(rev!=null){
            while(!s1.isEmpty()&&s1.peek()<=rev.val){
                s1.pop();
            }
            if(s1.isEmpty()){
                s2.push(0);
            }
            else{
                s2.push(s1.peek());
            }
            s1.push(rev.val);
            rev=rev.next;
        }
        while(!s2.isEmpty()){
            list.add(s2.pop());
        }
        int res[]=new int[list.size()];
        for(int i=0;i<list.size();i++){
            res[i]=list.get(i);
        }
        return res;
    }
}
