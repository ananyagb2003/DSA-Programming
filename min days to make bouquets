class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n=m*k;
        int len=bloomDay.length;
        if(len<n){
            return -1;
        }
        int mid;
        int low=Arrays.stream(bloomDay).min().getAsInt();
        int high=Arrays.stream(bloomDay).max().getAsInt();
        while(low<high){
            mid=(high+low)/2;
            if(possible(bloomDay,mid,m,k)){
                high=mid;
            }
            else{
                low=mid+1;
            }
        }
        return low;
    }
    boolean possible(int[] bloomDay,int mid,int m,int k){
        int count=0;
        int tot=0;
        for(int i=0;i<bloomDay.length;i++){
            if(bloomDay[i]<=mid){
                count++;
            }
            else{
                tot+=count/k;
                count=0;
            }
        }
        tot += count / k;
        if(tot>=m){
            return true;
        }
        return false;
    }

}
